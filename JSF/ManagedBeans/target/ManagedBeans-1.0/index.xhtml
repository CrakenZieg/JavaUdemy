<!-- comentarios al final -->

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"> <!-- agregamos los tags de JSF -->
    <head>
        <title>Hola Mundo JSF</title>
    </head>
    <body>
        <!-- creamos un formulario -->
        <h:form>
            <table>
                <tr>
                    <!-- agregamos el label -->
                    <td><h:outputLabel for="nombre" value="Nombre:"></h:outputLabel></td>
                    <!-- agregamos un espacion para ingresar texto -->
                    <td><h:inputText id="nombre" value="#{candidato.nombre}"></h:inputText></td>
                    <!-- agregamos una etiqueta de mensaje por si hay algun problema con el atributo -->
                    <td><h:message for="nombre"></h:message></td>
                </tr>
            </table>
            <h:commandButton action="#{vacanteForm.enviar}" value="Enviar" /> 
        </h:form>
    </body>
</html>
<!-- 
Comenzamos el proyecto de JSF (Java Server Faces) incluyendo log4j2 en 
dependencies de pom.xml, log4j2 nos permite llevar un log del server. Tiene diferentes
niveles de informacion que registrar, diferentes outputs para ella y tambien la 
posibilidad de darle formato a la informacion que registra.
Como usamos glassfish 6.X, posterior a 5, no debimos configurar JSF porque viene
incluido.
En WEB-INF debe exitir el archivo web.xml, en el que configuramos stage del proyecto
nombre del server y cuando se carga, archivo de inicio (index.xhtml) y path generico
de faces.
JSF utiliza el concepto de Managed Beans, como sugiere son Beans (tienen constructor 
vacio, atributos privados y Getters & Setters para cada uno de ellos). No estÃ¡n 
obligados a extender ninguna clase. Baking Beans son los Managed Beans del lado del 
servidor (backend), podriamos catalogarlos en Beans de Modelo o Control (MVC), de 
soporte o helpers (un convertidor por ejemplo) o de utileria (para tareas genericas)
Los Managed Beans se pueden declarar: 
-usando el decorador @ManagedBean. 
-como CDI(Contects and Dependency Inyection) y agregando @Named, pero debemos agregar un 
archivo beans.xml en WEB-INF; CDI es mas flexible para administrarlos, los beans CDI
estan asociados a un scope; CDI especifica la formaen que se iyectan, interceptan, 
filtran u observan ciertos eventos; usa en concepto de inversion de control (es el
framework el que decide como funcionan las cosas a partir de las respuestas que se
piden de el)
-usando el archivo faces-config.xml incluyendo los tags \<managed-bean> \</managed-bean> 
en el.

Los Managed beans tienen diferentes scopes para guardar informacion en forma de 
MAP ({llave:valor, ...}) ellos son: 
-Application
-Session
-View (persiste si es la misma vista, util para Ajax)
-Request
-Custom 
(las anotaciones se encuentran en jakarta.faces.beans)
CDI tiene diferentes scopes para guardar informacion en forma de MAP ({llave:valor, ...}) 
ellos son: 
-Application
-Session
-Conversation (persiste hasta concluir alguna tarea)
-Request
-Custom
(las anotaciones se encuentran en jakarta.enterprise.context)

La navegacion en JSF permite movernos entre diferentes paginas de la misma tecnologia,
los tipos son:
-Navegacion estatica: la siguiente pagina/vista esta definida por un nombre o 
string fijo
-Navegacion dinamica: la siguiente pagina/vista depende de la accion que ejecuta 
el usuario, y el string de regreso del metodo Action ejecutado.

La navegacion se puede configurar de varias formas:
-Navegacion implicita: la salida especificada busca una pagina con un nombre identico
al string de salida del directorio actual, con la mima extension de la pagina actual 
(xhtml, jsp, etc)
-Navegacion explicita: se define en el archivo faces-config.xml, hay que agregar 
un elemento xml que indique cual es la peticion, cual es la salida y a que pagina
se dirige.
(la Implicita tiene preferencia, es decir, primero busca una pagina, si no la encuentra
va al archivo faces-config)

En la nav estatica el elemento que define la siguiente pagina a mostrar es un string
y se le conoce salida u outcome; esta aplica cuando no hay que ejecutar condigo 
Java del lado del servidor, solo dirigirse a esa pagina, tambien cuando no hay logica 
para determinar la pagina siguiente

En la nav dinamica el metodo action tiene la logica para determinar la salida u 
outcome, implica usar Expression Language para llamar un #\{(bean).(metodo())} que nos
devuelva el outcome

En faces-config se crean las reglas de navegacion primero navigation-rule, primero 
from-view-id, definimos luego los navigation-case, dentro de estos van from-outcome 
y to-view-id
-->
 